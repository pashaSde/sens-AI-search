{"version":3,"sources":["components/Search.tsx","App.tsx","index.js"],"names":["backendUrl","process","Search","searchMode","setSearchMode","useState","imageFile","setImageFile","imageMatches","setImageMatches","textQuery","setTextQuery","textMatches","setTextMatches","imageOod","setImageOod","textOod","setTextOod","loading","setLoading","imageBlobs","setImageBlobs","loadImageBlobs","async","newBlobs","Promise","all","matches","map","res","fetch","concat","match","path","headers","blob","URL","createObjectURL","err","console","warn","prev","_objectSpread","renderMatches","idx","_jsxs","className","style","border","borderRadius","marginBottom","padding","children","_jsx","src","alt","caption","maxWidth","maxHeight","rank","ood_score","toFixed","type","checked","onChange","onSubmit","e","preventDefault","_data$query_ood_score","formData","FormData","append","method","body","mode","data","json","results","query_ood_score","alert","htmlFor","FiUpload","size","name","id","accept","display","_e$target$files","target","files","disabled","margin","_data$query_ood_score2","JSON","stringify","query","value","placeholder","App","Router","position","zIndex","role","Routes","Route","element","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d66c548.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Search.css';\nimport { FiUpload } from 'react-icons/fi'; // Add at the top\n\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\n\nfunction oodColor(score: number, min: number, max: number) {\n    const norm = 1 - Math.max(0, Math.min(1, (score - min) / (max - min)));\n    const r = Math.round(255 * (1 - norm));\n    const g = Math.round(180 * norm + 75 * (1 - norm));\n    return `rgba(${r},${g},120,0.15)`;\n}\n\nconst Search: React.FC = () => {\n    const [searchMode, setSearchMode] = useState<'image' | 'text'>('image');\n    const [imageFile, setImageFile] = useState<File | null>(null);\n    const [imageMatches, setImageMatches] = useState<any[]>([]);\n    const [textQuery, setTextQuery] = useState('');\n    const [textMatches, setTextMatches] = useState<any[]>([]);\n    const [imageOod, setImageOod] = useState<number | null>(null);\n    const [textOod, setTextOod] = useState<number | null>(null);\n    const [loading, setLoading] = useState(false);\n    const [imageBlobs, setImageBlobs] = useState<Record<string, string>>({});\n\n    const OOD_MIN = 0;\n    const OOD_MAX = 20;\n\n    const loadImageBlobs = async (matches: any[]) => {\n        const newBlobs: Record<string, string> = {};\n        await Promise.all(\n            matches.map(async (match) => {\n                try {\n                    const res = await fetch(`${backendUrl}${match.path}`, {\n                        headers: {'ngrok-skip-browser-warning': 'true'}\n                    });\n                    const blob = await res.blob();\n                    newBlobs[match.path] = URL.createObjectURL(blob);\n                } catch (err) {\n                    console.warn(\"Failed to load image:\", match.path);\n                }\n            })\n        );\n        setImageBlobs((prev) => ({...prev, ...newBlobs}));\n    };\n\n    const handleImageUpload = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!imageFile) return;\n        setLoading(true);\n        try {\n            const formData = new FormData();\n            formData.append('image', imageFile);\n            const res = await fetch(`${backendUrl}/search_by_image`, {\n                method: 'POST',\n                body: formData,\n                headers: {'ngrok-skip-browser-warning': 'true'},\n                mode: \"cors\"\n            });\n            const data = await res.json();\n            setImageMatches(data.results || []);\n            setImageOod(data.query_ood_score ?? null);\n            await loadImageBlobs(data.results || []);\n        } catch (err) {\n            alert('Image search failed.');\n        }\n        setLoading(false);\n    };\n\n    const handleTextSearch = async (e: React.FormEvent) => {\n        e.preventDefault();\n        setLoading(true);\n        try {\n            const res = await fetch(`${backendUrl}/search_by_text`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'ngrok-skip-browser-warning': 'true'\n                },\n                body: JSON.stringify({query: textQuery}),\n                mode: \"cors\"\n            });\n            const data = await res.json();\n            setTextMatches(data.results || []);\n            setTextOod(data.query_ood_score ?? null);\n            await loadImageBlobs(data.results || []);\n        } catch (err) {\n            alert('Text search failed.');\n        }\n        setLoading(false);\n    };\n\n    const renderMatches = (matches: any[]) => (\n        matches.map((match, idx) => (\n            <div key={idx} className=\"result\" style={{\n                border: '1px solid #ccc',\n                borderRadius: '8px',\n                marginBottom: '1em',\n                padding: '1em'\n            }}>\n                {imageBlobs[match.path] && (\n                    <img\n                        src={imageBlobs[match.path]}\n                        alt={match.caption}\n                        style={{maxWidth: 400, maxHeight: 400, borderRadius: 12, marginBottom: '0.5em'}}\n                    />\n                )}\n                <div>Rank: {match.rank}</div>\n                <div>Caption: {match.caption}</div>\n                <div><strong>OOD Score:</strong> {match.ood_score.toFixed(2)}</div>\n            </div>\n        ))\n    );\n\n    // @ts-ignore\n    return (\n        <div>\n            <div className=\"toggle-container slider-toggle\">\n                <span className={`toggle-label${searchMode === 'image' ? ' active' : ''}`}>Image</span>\n                <label className=\"switch\">\n                    <input\n                        type=\"checkbox\"\n                        checked={searchMode === 'text'}\n                        onChange={() => setSearchMode(searchMode === 'image' ? 'text' : 'image')}\n                    />\n                    <span className=\"slider\"></span>\n                </label>\n                <span className={`toggle-label${searchMode === 'text' ? ' active' : ''}`}>Text</span>\n            </div>\n\n            {searchMode === 'image' && (\n                <div className=\"sensei-card\">\n                    <h2>Search by Image</h2>\n                    <form onSubmit={handleImageUpload}>\n                        <label htmlFor=\"image-upload\" className=\"file-upload-label\">\n                            {FiUpload({ size: 28 })}\n                            {imageFile ? <span className=\"file-placeholder\">{imageFile.name}</span> : <span className=\"file-placeholder\">Upload image</span>}\n                        </label>\n                        <input\n                            id=\"image-upload\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            style={{ display: 'none' }}\n                            onChange={e => setImageFile(e.target.files?.[0] || null)}\n                        />\n                        <button className=\"sensei-btn\" type=\"submit\" disabled={loading}>Upload & Search</button>\n                    </form>\n                    {imageOod !== null && (\n                        <div style={{margin: '1em 0'}}>\n                            <strong>Query OOD Score:</strong> {imageOod.toFixed(2)}\n                        </div>\n                    )}\n                    {renderMatches(imageMatches)}\n                </div>\n            )}\n\n            {searchMode === 'text' && (\n                <div className=\"sensei-card\">\n                    <h2>Search by Text</h2>\n                    <form onSubmit={handleTextSearch}>\n                        <input\n                            type=\"text\"\n                            value={textQuery}\n                            onChange={e => setTextQuery(e.target.value)}\n                            placeholder=\"Enter your query...\"\n                        />\n                        <button className=\"sensei-btn\" type=\"submit\" disabled={loading}>Search</button>\n                    </form>\n                    {textOod !== null && (\n                        <div style={{margin: '1em 0'}}>\n                            <strong>Query OOD Score:</strong> {textOod.toFixed(2)}\n                        </div>\n                    )}\n                    {renderMatches(textMatches)}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Search;","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Search from './components/Search';\nimport './sensei-theme.css';\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div className=\"sensei-splash-bg\"></div>\n            <div className=\"sensei-splash-overlay\"></div>\n            <div style={{ position: 'relative', zIndex: 2 }}>\n                <header className=\"sensei-header\">\n                    <span role=\"img\" aria-label=\"ninja\">🥷</span> Sens-AI-Search\n                    <div className=\"sensei-subheader\">\n                        Find images by text or upload, powered by AI <span role=\"img\" aria-label=\"spark\">✨</span>\n                    </div>\n                </header>\n                <Routes>\n                    <Route path=\"/\" element={<Search />} />\n                </Routes>\n                 <Routes>\n                    <Route path=\"/sens-AI-search\" element={<Search />} />\n                </Routes>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;","// filepath: /Users/pankajsharma/PycharmProjects/SenseiSearch/image-retrieval-ui/src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}